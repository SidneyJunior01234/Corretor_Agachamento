# app.py

import streamlit as st
import cv2
import numpy as np
import os
import time
import plotly.graph_objects as go # Importar para usar st.plotly_chart

# Importar funcionalidades dos m√≥dulos reorganizados
from src.core.detector_pose import DetectorPose
from src.core.analisador_agachamento import AnalisadorAgachamento
from src.visualizacao.desenhista_cv2 import desenhar_landmarks
from src.manipulador_dados.gerenciador_csv import inicializar_csv, adicionar_linha_csv, carregar_dados_csv
from src.visualizacao.gerador_graficos import (
    gerar_grafico_angulos,
    gerar_grafico_posicao_quadril,
    gerar_grafico_duracao_agachamentos
)
from config.configuracoes import (
    NOME_ARQUIVO_CSV,
    ESTADOS_DICT,
    COR_AMARELO, COR_VERDE, COR_VERMELHO,
    TOLERANCIA_PES_OMBRO_PERCENTUAL
)

st.set_page_config(layout="wide", page_title="Corretor de Agachamento")

st.title("üèãÔ∏è Corretor de Agachamento")

st.write("""
    Este aplicativo usa vis√£o computacional para analisar a forma do seu agachamento
    e gerar um relat√≥rio completo ao final.
""")

# --- Controles da Barra Lateral ---
st.sidebar.header("Controles do Aplicativo")

# Op√ß√£o de upload de v√≠deo ou usar exemplo
opcao_video = st.sidebar.radio(
    "Escolha a fonte do v√≠deo:",
    ("Upload de V√≠deo", "Usar V√≠deo de Exemplo")
)

caminho_video_exemplo = os.path.join('data', 'brutos', 'agachamento.mp4')
if not os.path.exists(os.path.dirname(caminho_video_exemplo)):
    os.makedirs(os.path.dirname(caminho_video_exemplo))

uploaded_file = None
if opcao_video == "Upload de V√≠deo":
    uploaded_file = st.sidebar.file_uploader("Carregue seu v√≠deo de agachamento (mp4)", type=["mp4"])
    if uploaded_file:
        caminho_temp_upload_dir = "temp_upload"
        if not os.path.exists(caminho_temp_upload_dir):
            os.makedirs(caminho_temp_upload_dir)
        
        caminho_video = os.path.join(caminho_temp_upload_dir, uploaded_file.name)
        with open(caminho_video, "wb") as f:
            f.write(uploaded_file.getbuffer())
        st.sidebar.success(f"V√≠deo '{uploaded_file.name}' carregado com sucesso!")
    else:
        st.stop()
elif opcao_video == "Usar V√≠deo de Exemplo":
    if os.path.exists(caminho_video_exemplo):
        caminho_video = caminho_video_exemplo
        st.sidebar.info(f"Usando v√≠deo de exemplo: `{caminho_video_exemplo}`")
    else:
        st.error(f"V√≠deo de exemplo n√£o encontrado em `{caminho_video_exemplo}`. Por favor, carregue um v√≠deo ou forne√ßa o arquivo.")
        st.stop()
else:
    st.stop()

st.sidebar.markdown("---")
st.sidebar.subheader("Ajustes de Limiares para Agachamento")

# Sliders para os limiares
# Valores padr√£o: Em Pe (150-180), Agachado (0-130), Queda Y (0.05-0.15)
limiar_joelho_em_pe = st.sidebar.slider(
    '√Çngulo M√≠n. Joelho "Em P√©" (graus)',
    min_value=120, max_value=180, value=150, step=1,
    help='√Çngulo m√≠nimo que o joelho deve atingir para ser considerado "Em P√©". Valores maiores exigem extens√£o maior.'
)

limiar_joelho_agachado = st.sidebar.slider(
    '√Çngulo M√°x. Joelho "Agachado" (graus)',
    min_value=40, max_value=195, value=120, step=1,
    help='√Çngulo m√°ximo que o joelho deve atingir para ser considerado "Agachado". Valores menores exigem agachamento mais profundo.'
)

limiar_queda_y_percentual = st.sidebar.slider(
    'Queda do Quadril para Agachamento (%)',
    min_value=0.03, max_value=0.20, value=0.05, step=0.01, format="%.2f",
    help='Percentual da altura do corpo que o quadril deve descer para o agachamento ser v√°lido. Valores maiores exigem mais profundidade.'
)

st.sidebar.markdown("---")
processar_button = st.sidebar.button("Iniciar An√°lise do Agachamento")

placeholder_video = st.empty()
progress_bar_placeholder = st.empty()


if processar_button and caminho_video:
    detector = DetectorPose()
    analisador = AnalisadorAgachamento()
    
    caminho_csv_completo = inicializar_csv()
    
    cap = cv2.VideoCapture(caminho_video)
    
    if not cap.isOpened():
        st.error(f"N√£o foi poss√≠vel abrir o v√≠deo: {caminho_video}")
        if 'temp_upload' in caminho_video:
            os.remove(caminho_video)
            os.rmdir(os.path.dirname(caminho_video))
        st.stop()

    fps = cap.get(cv2.CAP_PROP_FPS)
    total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
    if fps == 0:
        fps = 30.0
    
    frame_count = 0
    altura_frame_calibrada = None

    st.markdown("### Processando V√≠deo e Analisando Agachamento...")
    st_progress_text = progress_bar_placeholder.text("Iniciando...")
    st_progress_bar = progress_bar_placeholder.progress(0)

    analisador.resetar_estado()

    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break

        frame_count += 1
        st_progress_bar.progress(min(frame_count / total_frames, 1.0))
        st_progress_text.text(f"Processando Frame: {frame_count}/{total_frames}")

        frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        resultados = detector.processar_frame(frame_rgb)

        h, w, _ = frame.shape
        if altura_frame_calibrada is None:
            altura_frame_calibrada = h

        drawing_color = COR_AMARELO

        info_agachamento = None
        if resultados.pose_landmarks:
            # Passar os limiares do slider para o analisador
            info_agachamento = analisador.analisar_pose(
                resultados.pose_landmarks.landmark, h, w,
                limiar_joelho_em_pe, limiar_joelho_agachado, limiar_queda_y_percentual
            )
            
            estado_atual = info_agachamento['estado_pose']
            
            if estado_atual == "Agachado":
                drawing_color = COR_VERDE
            elif estado_atual == "Em Pe":
                dist_ombros_px = info_agachamento['distancia_ombros_px']
                dist_pes_px = info_agachamento['distancia_pes_px']
                limite_inferior_pes = dist_ombros_px * (1 - TOLERANCIA_PES_OMBRO_PERCENTUAL)
                limite_superior_pes = dist_ombros_px * (1 + TOLERANCIA_PES_OMBRO_PERCENTUAL)

                if not (limite_inferior_pes <= dist_pes_px <= limite_superior_pes):
                    drawing_color = COR_VERMELHO
                else:
                    drawing_color = COR_AMARELO

            else:
                drawing_color = COR_AMARELO

            frame = desenhar_landmarks(frame, resultados, drawing_color)
            
            linha_csv = [
                frame_count,
                ESTADOS_DICT[info_agachamento['estado_pose']],
                f"{info_agachamento['angulo_joelho_esq']:.2f}",
                f"{info_agachamento['angulo_joelho_dir']:.2f}",
                f"{info_agachamento['angulo_tornozelo_esq']:.2f}",
                f"{info_agachamento['angulo_tornozelo_dir']:.2f}",
                f"{info_agachamento['distancia_pes_px']:.2f}",
                f"{info_agachamento['distancia_ombros_px']:.2f}",
                f"{info_agachamento['ombro_esq_y_px']}",
                f"{info_agachamento['ombro_dir_y_px']}",
                f"{info_agachamento['quadril_esq_y_px']}",
                f"{info_agachamento['quadril_dir_y_px']}"
            ]
            adicionar_linha_csv(linha_csv, caminho_csv_completo)

        frame = cv2.resize(frame, (640, 480)) # Ajuste aqui para o tamanho desejado
        placeholder_video.image(frame, channels="BGR", use_container_width=True)
        # time.sleep(1/fps) # Pode causar lentid√£o, especialmente com v√≠deos grandes. Comente se necess√°rio.

    cap.release()
    detector.fechar()
    
    if uploaded_file and os.path.exists(caminho_video):
        os.remove(caminho_video)
        if os.path.exists(caminho_temp_upload_dir) and not os.listdir(caminho_temp_upload_dir):
            os.rmdir(caminho_temp_upload_dir)

    st_progress_text.empty()
    st_progress_bar.empty()
    
    st.success("An√°lise do agachamento conclu√≠da! Gerando relat√≥rio...")

    # --- An√°lise Final e Gera√ß√£o de Relat√≥rios ---
    st.markdown("---")
    st.markdown("## ‚úÖ Relat√≥rio Final do Agachamento")
    
    dados_carregados = carregar_dados_csv(caminho_csv_completo)

    if dados_carregados:
        tempo_total_em_pe_seg = analisador.calcular_tempo_total_em_pe(dados_carregados, fps)
        st.write(f"**Tempo total em p√© geral:** {tempo_total_em_pe_seg:.2f} segundos")
        
        lista_agachamentos, transicoes_em_pe = analisador.analisar_agachamentos_individuais(dados_carregados, fps)
        
        if lista_agachamentos or transicoes_em_pe:
            st.markdown("### Gr√°ficos de Desempenho:")
            
            # Gr√°fico de √Çngulos (Plotly) - Passar os limiares do slider
            fig_angulos = gerar_grafico_angulos(dados_carregados, fps, limiar_joelho_em_pe, limiar_joelho_agachado, nome_arquivo="angulos_agachamento.html")
            if fig_angulos:
                st.plotly_chart(fig_angulos, use_container_width=True)
            else:
                st.warning("N√£o foi poss√≠vel gerar o gr√°fico de √¢ngulos.")

            # Gr√°fico de Posi√ß√£o do Quadril (Plotly) - Passar o limiar do slider
            fig_quadril = gerar_grafico_posicao_quadril(dados_carregados, fps, analisador.initial_y_quadril, altura_frame_calibrada, limiar_queda_y_percentual, nome_arquivo="posicao_quadril_agachamento.html")
            if fig_quadril:
                st.plotly_chart(fig_quadril, use_container_width=True)
            else:
                st.warning("N√£o foi poss√≠vel gerar o gr√°fico de posi√ß√£o do quadril.")
            
            # Gr√°fico de Dura√ß√£o de Agachamentos e Tempo em P√© (Plotly)
            fig_duracao = gerar_grafico_duracao_agachamentos(lista_agachamentos, transicoes_em_pe, nome_arquivo="duracao_agachamentos_interativo.html")
            if fig_duracao:
                st.plotly_chart(fig_duracao, use_container_width=True)
            else:
                st.warning("N√£o foi poss√≠vel gerar o gr√°fico de dura√ß√£o dos agachamentos e tempo em p√©.")

            st.success("Relat√≥rios e gr√°ficos gerados com sucesso na pasta `data/relatorios`!")
        else:
            st.warning("Nenhum agachamento completo ou per√≠odo em p√© detectado para gerar relat√≥rio detalhado.")
    else:
        st.error("N√£o foi poss√≠vel carregar os dados do CSV para o relat√≥rio final.")